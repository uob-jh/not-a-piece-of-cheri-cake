Transcript

Speaker 2
Hello, thank you very much for taking part in the study. I have to ask you two questions before we start. So in your own words, can you define what a capability is?
Speaker 1
The capability lets the hardware know what this pointer can do like a specific area of memory it can access and what you can do with it?
Speaker 2
Thank you very much. Second question. What changes do developers have to make to compile their program to the CHERI architecture?
Speaker 1
So they have their own version of the compiler, which you'll need to use. It mentioned that you won't need to do much, but it's stuff to do with like certain pointer arithmetic, you will need to change because otherwise it doesn't know which capability to use.
Speaker 2
You have two machines. This machine is a CHERI BSD machine, OK? And this is the UBUNTU machine, The normal one. And you have this small C code, right? And you have the task objective is to compile the C code using the capability mode and make it run successfully on CHERI-BSD. So, when you compile it to capability mode, you will have some problems you have to fix to make it work on the CHERI-BSD successfully.
Speaker 2
So yeah, you have two flags. One to compile the file to the capability mode and the other to the base mode file basically.
Speaker 2
This is how the program is supposed to execute. Right now, your objective is to compile the program using capability mode. Make it work. You have one hour to do this task, go ahead.
Speaker 1
OK. I'm first going to compile using capability mode just to see what is happening. 2 warnings and those are probably. Going to be useful. Under expression and capability. Unsigned and your point is not. Which should be used as the source, right?
Speaker 1
Because if they both have it then currently it goes to left hand. But I think it's. Like vaaddr or size_t offset. That's the wrong thing. Offset should be a size T, assuming I know what it does, so maybe I should also look at the code line 15. Right, get right offset passing an offset and a buffer. Where is this used? Offset is to do with the number of reads. OK, so this is just a pure offset.
Speaker 2
OK.
Speaker 1
So we could either cast it to a size in the function or just have it always be a size. I'm not particularly caring about code cleanliness. Is that OK? Then I'll just cast it to a size T inside the actual.
Speaker 2
So before before we move on, can you please let me know in like in your own words what do you think the warning is about and? Why it's happening?
Speaker 1
So the warning is happening because both the buffer pointer and the offset pointer have capabilities attached to them. And the problem is that if you're adding them together, they might have different capabilities. Either they might or they do, I don't know. And the problem is well now the resulting pointer. What should its capabilities be? And I remember them mentioning that that might be an error in the future, but for now they're  just taking the one on the left, because the one on the left is an offset. That's just being incremented. That's a problem, because that doesn't actually point to anything. It's just an integer.
Speaker 2
And how would you go about fixing that?
Speaker 1
Well, so I just set it to be a I cast it to size T so that the compiler knows. Oh, I'm using this as like a length or size. I don't need to worry about precisely what it can access because I'll just add it. So that's one of the warnings and the second warning passed from Providence free integer type to pointer type will give pointer that cannot reference, right? Right. OK. So this is to do with file long file do tasks with file where where we get file. Yeah, we're casting the file pointer to a long because they are in C like the same size. And that's not great, because an integer doesn't have I think they do have capabilities they might or might not, I don't know, but it's not great because it's not. An integer shouldn't point to a thing. And so the problem here could just be fixed by. Ohh OK, I know why they do it. It's because FD on line 80, it could either be the file pointer or the result of some open. There are essentially, I just need to make sure that it can be passed as a pointer, so maybe I cast it to a uint pointer. Yeah, just give that a spin and see what happens so FD is actually? Oh, no, because it needs to be minus one or it starts. At least then I don't want to question that.  So FT is now an intptr_t casting file pointed down here to be an int pointer. Which means I will need to change all of the other times it is used as a long. To also be an intptr_t. Which cow could cause problems, so that's OK. That's what's done over here. It's turned into an integer. That's OK, because I imagine. That would be the open result or the result of the open function.
Speaker 1
That seems fine.
Speaker 1
OK, so I'm going to yes.
Speaker 2
Before compiling, I was going to ask you the same question. why do you think the warning is happening and how would you go about fixing it?
Speaker 1
So the problem is in this case, yes, the long being passed in is a file pointer. But the problem is is that if you just pass in any number and then it gets passed into a file pointer well, that's just a number. It doesn't have the capability to reach the file. You don't know if you can read or write to it. I think if you just pass in a regular integer, there's something to do with like the the data capability register or something, and so it would just get set to that and you probably don't want that. OK. And so instead I'm changing it to an integer pointer so that. It keeps its capability.
Speaker 2
What do you think about the display of warnings in general?
Speaker 1
I just just the like precisely what the warnings is, or like the warnings in general.
Speaker 2
What do you think about the warning?
Speaker 1
I mean, I liked these warnings because it says. I mean they they used to want. So they say what the problem is like but I. Don't precisely know what provenance was, but I get that the problem is that the integer type doesn't have something that the pointer needs and then the exact thing says capability misused and so I know the problem is capabilities and then the other one. Well, again, I don't know what provenance is, but it says that it's not clear which should be used, and so you can look at it and go, oh, that's the problem.
Speaker 2
Do you think it will work the? The fixes that you did.
Speaker 1
I Think so? I am because. OK, what's happened? It didn't save.
Speaker 2
Speaker 1
Ohh, the number of times I've done that in coursework, OK. K compiled and sent. Yes, I am 100% confident.
Speaker 2
Amazing performance, right? So before ending this task, what do you think about the documentation?
Speaker 1
When I the documentation I read looked pretty straightforward it I didn't know these types existed in C like int_ptr or vaddr some of the choices for which ones you use for certain things seemed a bit arbitrary. Of course, if it's for like, C professionals, then I'm sure that would make sense. There was a lot of repeated information from the C documentation to the CHERI documentation, and I feel like the C documentation one it might have If at some point in it there was just like a bullet point list of precisely everything that would change, and every single new function of macro CHERI provides. Just because if this task had been a bit more complicated. I would not have, for example, to do with like the bitwise operations that it gives you then I wouldn't have known where to start looking in the documentation for that I have to like scroll through until it starts explaining it, but overall. I mean, I remembered it after reading it yesterday, so it must have been good.
Speaker 2
Thank you very much. Now to the second task. So in this second task you will be the merge master of a project where developers made merge requests to port their programs to CHERI. You have to decide if this merge request is good and will you accept it or no. What does it do exactly? Does have any security applications or no, So this is people trying to compile their programs and change them to work on CHERI architecture and you have to decide, is this a good change or not? And you have 4 merge requests, you have one hour to do this so. We start from this one. So what do you think this merge request is doing?
Speaker
OK.
Speaker 1
Doing so, void pointer points to 1.
Speaker 1
Void Pointer just sort of points to anything and I think it still has like its capabilities and stuff. And then it changes. To instead be vaddr_t which is used for virtual addresses I think.
Speaker 2
You can look at the documentation if you want you have it there.



Speaker 1
Of course, let's just double check that. Yeah, virtual addresses. There we go. That's the right one. Of course we would start on the left. And so pointer width. It looks like they're changing it to be  get the width or a point or two virtual address space as opposed to a pointer in general. I don’t know if that's a useful change. Because I'm not sure if the sizes are any different and we're not using any like capabilities or anything here we are Just after its size. Let's see if he the documentation had anything to do with the sizes of it and. No, I think they're the same size. So I don't think this is like particularly useful.
Speaker 2
OK. So would you accept or reject it?
Speaker 1
Reject it on the grounds of making what it does less readable, because it's after the pointer width, so it makes sense to give a void pointer as opposed to a data type.
Speaker 2
So do you think it will have any security implications or no?
Speaker 1
I don't think so. OK. Because if the size is the same and we're just like, that will get changed that compile time to a value, and I think they're the same size. Therefore it should be the same. Number compared to the same thing.
Speaker 2
You next merge request, OK. What do you think this is about? Oh, by the way, I have to tell you that you know that the n_value here, this is a long value, OK.
Speaker 1
It looks like instead of casting something to avoid. We're casting it to a pointer. And then a void pointer which. If this changes something, we'll feel a bit off, but if it's OK. So going from something being along. We're now treating it like a pointer and then we are again treating it like a pointer. Knowing regular C, This would compile to the same thing because we're just putting the stuff there to make the type checker happy. Now I'm just trying to think if it would do anything with the capabilities, but I don't see why casting it to a uint_ptr before a void pointer would change any of that. And if it does, then that might just be an issue with the compiler. Or it feels like that, to me at least, so I would reject this again. Because it feels like. It feels completely unnecessary and like they're just cluttering the code to make people think it's doing something important, but it's not.
Speaker 2
Do you think it has any security implications?
Speaker 1
No I don’t. Because it's a void pointer at the end of the day. 
Speaker 2
Alright next merge request
Speaker 1
Right. So take a. In terms of how C works? These four lines still that are deleted is this another way to define a function? OK, I don't think that's correct.
Speaker 1
That looks to me like you're defining a function with no type signatures and then defining some global variables. I think this is a necessary change because it wouldn't compile anyway. Now let's actually look to s. what else has like changed? OK, down in the second part of it. Instead of costing a function that just returns an integer. You are casting it to a function that takes a char pointer into a struct. But they aren't doing it with the thing that we've just changed to take in a char point, an integer and a start pointer. Will be honest. I don't know what these changes are trying to do. That it is assuming is is doing something important. I don't think it specifically has to do with CHERI. I think they're just changing how the function works.
Speaker 2
Do you think? You have any security implications, or no? Would you accept or reject that?
Speaker 1
I don't know because I don't know enough about the program?
Speaker 2
Fair enough. OK, that's fine.
Speaker 1
I think I wouldn't be working on this, OK.
Speaker 2
So yeah, that's fine. That's that's an acceptable answer. We can move on to the next.
Speaker 1
Get pointer size and bits. You get the size of void pointer. If times 8, it's 32. Which just feels like an odd way of doing it? Printing that it supports it. Otherwise printing it supports 64. OK, So what this code is doing is instead of just assuming the pointer size is always going to be 32, it checks to see if it's 32 or if it's 64 it does then print it out without a new line, which I don't like, but if given that later on we're defining spaces and dashes, I assume this is going to be doing a bunch of printing, so the printing is probably not a problem for the functionality I would. Take this change. And in terms of? Size of void pointer. Pretty sure size of is done at compile time. Will that change anything? Well, because this when it says this program supports 32 bits. Yeah. If you were to recompile this, then it would say it. But if you were trying to distribute it and you got the wrong version. Ohh no, that makes sense cause it says this program supports not. This machine supports the program. I think this is good. And would take it. Because security wise, if some stuff later assumed the size of certain stuff. Just to be 32 and you compiled it on a 64 bit system, that could cause some pretty bad problems, especially because if then CHERI needed to. Cuz yeah, the second part of a pointer. In CHERI oh. Pointers are at double the size in CHERI. Right. I wouldn't accept it. They need to fix the if statements. Because if the size times 8 is 64, then the program supports 32 bit machines. You need. I want also an if in there before just saying it automatically support 64. Maybe it's just not CHERI and you've messed everything up. I asked them to fix that. OK, so yes.
Speaker 2
We'll have security implications or no?.
Speaker 1
It would, when working have the good security implication of you're not just assuming 32 bits mean if you upgraded your system and ran it, you wouldn't be like writing data over itself or like whatever you needed that value for. In its current state, the security implication would be. Getting that wrong and writing over stuff.
Speaker 2
OK, before conclusion concluding, I have to ask you the same two questions I asked you before. So what is the capability?
Speaker 1
Capability is how the architecture knows what a pointer can do and the range of values it could have.
Speaker 2
OK, thanks. So what changes the developers have to make to port their programs to CHERI?
Speaker 1
They'll need to make sure they know what sizes they're working with, because pointers are now double length and they'll also need to make sure that they don't conflate numbers and pointers as often, so they need to be a bit more careful with the types.

